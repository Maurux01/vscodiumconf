{
    "If Statement": {
        "prefix": "i",
        "body": [
            "if (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "If statement"
    },
    "If-Else Statement": {
        "prefix": "ie",
        "body": [
            "if (${1:condition}) {",
            "\t${2: // code if true}",
            "} else {",
            "\t$0",
            "}"
        ],
        "description": "If-Else statement"
    },
    "Else If Statement": {
        "prefix": "eif",
        "body": [
            "else if (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "Else If statement"
    },
    "Switch Statement": {
        "prefix": "sw",
        "body": [
            "switch (${1:expression}) {",
            "\tcase ${2:value1}:",
            "\t\t$3",
            "\t\tbreak;",
            "\tcase ${4:value2}:",
            "\t\t$5",
            "\t\tbreak;",
            "\tdefault:",
            "\t\t$0",
            "}"
        ],
        "description": "Switch statement"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (int ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {",
            "\t$0",
            "}"
        ],
        "description": "For loop"
    },
    "For Each Loop": {
        "prefix": "fore",
        "body": [
            "for (${1:Type} ${2:item} : ${3:iterable}) {",
            "\t$0",
            "}"
        ],
        "description": "For Each loop"
    },
    "While Loop": {
        "prefix": "w",
        "body": [
            "while (${1:condition}) {",
            "\t$0",
            "}"
        ],
        "description": "While loop"
    },
    "Do While Loop": {
        "prefix": "dw",
        "body": [
            "do {",
            "\t$0",
            "} while (${1:condition});"
        ],
        "description": "Do-While loop"
    },
    "Method Declaration (Public)": {
        "prefix": "fn",
        "body": [
            "public ${1:ReturnType} ${2:methodName}(${3:args}) {",
            "\t$0",
            "}"
        ],
        "description": "Public method declaration"
    },
    "Method Declaration (Private)": {
        "prefix": "pfn",
        "body": [
            "private ${1:ReturnType} ${2:methodName}(${3:args}) {",
            "\t$0",
            "}"
        ],
        "description": "Private method declaration"
    },
    "Class Definition": {
        "prefix": "cl",
        "body": [
            "public class ${1:ClassName} {",
            "\t${1:ClassName}(${2:args}) {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Class definition"
    },
    "Constructor": {
        "prefix": "co",
        "body": [
            "public ${1:ClassName}(${2:args}) {",
            "\t$0",
            "}"
        ],
        "description": "Constructor"
    },
    "Try-Catch Block": {
        "prefix": "tc",
        "body": [
            "try {",
            "\t${1: // code to try}",
            "} catch (${2:ExceptionType} e) {",
            "\t${3: // code to handle exception}",
            "\te.printStackTrace();",
            "} finally {",
            "\t$0",
            "}"
        ],
        "description": "Try-Catch-Finally block"
    },
    "System.out.println (Print)": {
        "prefix": "p",
        "body": [
            "System.out.println(\"${1:message}\");"
        ],
        "description": "System.out.println (Print)"
    },
    "Log4j/SLF4J Logger": {
        "prefix": "log",
        "body": [
            "private static final org.slf4j.Logger ${1:logger} = org.slf4j.LoggerFactory.getLogger(${2:ClassName}.class);",
            "${1:logger}.info(\"${3:message}\");"
        ],
        "description": "Log4j/SLF4J Logger (requires setup)"
    },
    "Variable Declaration": {
        "prefix": "v",
        "body": [
            "${1:DataType} ${2:variableName} = ${3:value};"
        ],
        "description": "Variable declaration"
    },
    "Constant Declaration": {
        "prefix": "cst",
        "body": [
            "public static final ${1:DataType} ${2:CONSTANT_NAME} = ${3:value};"
        ],
        "description": "Constant declaration"
    },
    "Enum Declaration": {
        "prefix": "en",
        "body": [
            "public enum ${1:EnumName} {",
            "\t${2:VALUE1},",
            "\t${3:VALUE2};",
            "\t$0",
            "}"
        ],
        "description": "Enum declaration"
    },
    "Interface Declaration": {
        "prefix": "int",
        "body": [
            "public interface ${1:InterfaceName} {",
            "\t${2:ReturnType} ${3:methodName}(${4:args});",
            "}"
        ],
        "description": "Interface declaration"
    },
    "Single Line Comment": {
        "prefix": "c",
        "body": [
            "// ${1:comment}"
        ],
        "description": "Single line comment"
    },
    "Multi Line Comment": {
        "prefix": "cm",
        "body": [
            "/*",
            " * ${1:comment}",
            " */"
        ],
        "description": "Multi-line comment"
    },
    "Javadoc": {
        "prefix": "javadoc",
        "body": [
            "/**",
            " * ${1:Description of the method/class.}",
            " * @param ${2:paramName} ${3:Description of paramName.}",
            " * @return ${4:Description of return value.}",
            " * @throws ${5:ExceptionType} ${6:Description of thrown exception.}",
            " * @see ${7:RelatedClass}",
            " */",
            "$0"
        ],
        "description": "Javadoc comment"
    },
    "Import Statement": {
        "prefix": "imp",
        "body": [
            "import ${1:packageName}.${2:ClassName};"
        ],
        "description": "Import statement"
    }
}
