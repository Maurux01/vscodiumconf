{
    "If Statement": {
        "prefix": "i",
        "body": [
            "if ${1:condition} {",
            "\t$0",
            "}"
        ],
        "description": "If statement"
    },
    "If-Else Statement": {
        "prefix": "ie",
        "body": [
            "if ${1:condition} {",
            "\t${2: // code if true}",
            "} else {",
            "\t$0",
            "}"
        ],
        "description": "If-Else statement"
    },
    "Else If Statement": {
        "prefix": "eif",
        "body": [
            "else if ${1:condition} {",
            "\t$0",
            "}"
        ],
        "description": "Else If statement"
    },
    "Match Statement": {
        "prefix": "ma",
        "body": [
            "match ${1:expression} {",
            "\t${2:Pattern1} => ${3:code1},",
            "\t${4:Pattern2} => ${5:code2},",
            "\t_ => $0,",
            "}"
        ],
        "description": "Match statement"
    },
    "For Loop (Iterate)": {
        "prefix": "for",
        "body": [
            "for ${1:item} in ${2:iterable} {",
            "\t$0",
            "}"
        ],
        "description": "For loop iterating over an iterable"
    },
    "For Loop (Range)": {
        "prefix": "forr",
        "body": [
            "for ${1:i} in ${2:start}..${3:end} {",
            "\t$0",
            "}"
        ],
        "description": "For loop iterating over a range"
    },
    "While Loop": {
        "prefix": "w",
        "body": [
            "while ${1:condition} {",
            "\t$0",
            "}"
        ],
        "description": "While loop"
    },
    "Loop (Infinite)": {
        "prefix": "lp",
        "body": [
            "loop {",
            "\t$0",
            "}"
        ],
        "description": "Infinite loop"
    },
    "Function Declaration": {
        "prefix": "fn",
        "body": [
            "fn ${1:function_name}(${2:args}) -> ${3:ReturnType} {",
            "\t$0",
            "}"
        ],
        "description": "Function declaration"
    },
    "Method Declaration (impl)": {
        "prefix": "meth",
        "body": [
            "impl ${1:StructName} {",
            "\tfn ${2:method_name}(&self, ${3:args}) -> ${4:ReturnType} {",
            "\t\t$0",
            "\t}",
            "}"
        ],
        "description": "Method declaration within an impl block"
    },
    "Struct Definition": {
        "prefix": "st",
        "body": [
            "struct ${1:StructName} {",
            "\t${2:field1}: ${3:Type1},",
            "\t${4:field2}: ${5:Type2},",
            "}"
        ],
        "description": "Struct definition"
    },
    "Enum Definition": {
        "prefix": "en",
        "body": [
            "enum ${1:EnumName} {",
            "\t${2:Variant1},",
            "\t${3:Variant2}(${4:Type}),",
            "}"
        ],
        "description": "Enum definition"
    },
    "Trait (Interface)": {
        "prefix": "tr",
        "body": [
            "trait ${1:TraitName} {",
            "\tfn ${2:method_name}(&self, ${3:args}) -> ${4:ReturnType};",
            "}"
        ],
        "description": "Trait definition (Rust's interface)"
    },
    "Result (Error Handling)": {
        "prefix": "res",
        "body": [
            "fn ${1:function_name}(${2:args}) -> Result<${3:OkType}, ${4:ErrType}> {",
            "\t${5: // code that might return an error}",
            "\tOk($0)",
            "}"
        ],
        "description": "Function returning a Result for error handling"
    },
    "Panic (Error)": {
        "prefix": "pan",
        "body": [
            "panic!(\"${1:Error message: {}}\", ${2:error_data});"
        ],
        "description": "Panic macro for unrecoverable errors"
    },
    "Print (println!)": {
        "prefix": "p",
        "body": [
            "println!(\"${1:message}\");"
        ],
        "description": "Print statement (println!)"
    },
    "Debug Print (dbg!)": {
        "prefix": "dbg",
        "body": [
            "dbg!(${1:expression});"
        ],
        "description": "Debug print statement (dbg!)"
    },
    "Log (log::info!)": {
        "prefix": "log",
        "body": [
            "log::info!(\"${1:message}\", ${2:args});"
        ],
        "description": "Log statement (requires `log` crate)"
    },
    "Variable (let)": {
        "prefix": "v",
        "body": [
            "let ${1:variable_name}: ${2:Type} = ${3:value};"
        ],
        "description": "Immutable variable (let)"
    },
    "Mutable Variable (let mut)": {
        "prefix": "vm",
        "body": [
            "let mut ${1:variable_name}: ${2:Type} = ${3:value};"
        ],
        "description": "Mutable variable (let mut)"
    },
    "Constant (const)": {
        "prefix": "cst",
        "body": [
            "const ${1:CONSTANT_NAME}: ${2:Type} = ${3:value};"
        ],
        "description": "Constant declaration"
    },
    "Static Variable": {
        "prefix": "stc",
        "body": [
            "static ${1:STATIC_NAME}: ${2:Type} = ${3:value};"
        ],
        "description": "Static variable declaration"
    },
    "Asynchronous Function (async fn)": {
        "prefix": "afn",
        "body": [
            "async fn ${1:function_name}(${2:args}) -> ${3:ReturnType} {",
            "\t$0",
            "}"
        ],
        "description": "Asynchronous function (requires `async` runtime)"
    },
    "Await Keyword (.await)": {
        "prefix": "aw",
        "body": [
            "${1:future_expression}.await"
        ],
        "description": "Await keyword"
    },
    "Single Line Comment": {
        "prefix": "c",
        "body": [
            "// ${1:comment}"
        ],
        "description": "Single line comment"
    },
    "Multi Line Comment": {
        "prefix": "cm",
        "body": [
            "/*",
            " * ${1:comment}",
            " */"
        ],
        "description": "Multi-line comment"
    },
    "Doc Comment (///)": {
        "prefix": "doc",
        "body": [
            "/// ${1:Documentation for this item.}",
            "///",
            "/// # Examples",
            "///",
            "/// ```",
            "/// let x = 5;",
            "/// ```",
            "$0"
        ],
        "description": "Rust documentation comment"
    },
    "Use Statement": {
        "prefix": "us",
        "body": [
            "use ${1:crate::module::Item};"
        ],
        "description": "Use statement"
    }
}